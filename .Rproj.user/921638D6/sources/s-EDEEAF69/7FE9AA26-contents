---
title: "Untitled"
author: "Saliou NDAO"
date: "1/10/2022"
output: pdf_document
---

```{r setup, include=FALSE}
#https://www.slideshare.net/RsquaredIn/rmysql-tutorial-for-beginners
knitr::opts_chunk$set(echo = TRUE)
```

## Connexion base de données MysQl

- Library pour se connecter à une base de données MysQL
```{r cars}
#install.packages("RMySQL")
library(RMySQL)

# Variables
databaseName <- "corpus_emploi"
table <- "fait_corpus"
data <- list()
data$text = "On appelle corpus parallèle un ensemble de couples de textes tel que, pour un couple, un des textes est la traduction"
```

**Parametres de connexion de la base de données**

```{r pressure, echo=FALSE}
options(mysql = list(
  "host" = "127.0.0.1",
  "port" = 8889,
  "user" = "root",
  "password" = "root"
))
```

**getConnexion**

La connexion à la base de donnée MysQL se fait par le biais de la fonction dbConnect().

```{r pressure, echo=FALSE}
getSingleConnexion <- function(){
  db <- dbConnect(MySQL(), 
                  dbname = databaseName, 
                  host = options()$mysql$host,
                  port = options()$mysql$port, 
                  user = options()$mysql$user,
                  password = options()$mysql$password)
  return(db)
}
con = getSingleConnexion()
summary(con)
```

**dbGetInfo()**

Fonction à utiliser pour acceder aux information de la base de données en questions, server, connection type etc.

```{r pressure, echo=FALSE}
dbGetInfo(con)
```

**dbListTables()**
Fonction pour acceder à la liste de table de la base de données

```{r pressure, echo=FALSE}
dbListTables(con)
```
**dbListFields**
Pour acceder aux champs d'une table
```{r pressure, echo=FALSE}
dbListFields(con, "fait_corpus")
```

**Querying Data**

- dbReadTable(): import the complete table
- dbGetQuery(): send query and retrieve
- dbSendQuery(): submit query and fetch using dbFetch

**dbReadTable**
Pour acceder aux champs d'une table
```{r pressure, echo=FALSE}
dbReadTable(con, "fait_corpus")
```
**dgGetQuery**
```{r pressure, echo=FALSE}
dbGetQuery(con, "SELECT * FROM fait_corpus LIMIT 5;")
```
**dbSendQuery**
```{r pressure, echo=FALSE}
query <- dbSendQuery(con, "SELECT * FROM fait_corpus;")
data <-dbFetch(query, n=5)
print(class(data))
print(data)
```

**Query Information**
Retourne des infos à propos de la requéte soumise.

```{r pressure, echo=FALSE}
query <- dbSendQuery(con, "SELECT * FROM fait_corpus;")
dbGetInfo(query)
```

## Operation CRUD dans la base de données

**Inserer des données dans une table de base de données**
```{r pressure, echo=FALSE}
save <- function(data) {
  # Connect to the database
  db <- getSingleConnexion()
  # Construct the update query by looping over the data fields
  query <- sprintf(
    "INSERT INTO %s (%s) VALUES ('%s')",
    table,
    paste("moncorpus", collapse = ", "),
    paste(data$text, collapse = "', '")
  )
  # Submit the update query and disconnect
  res = dbGetQuery(db, query)
  dbDisconnect(db)
  return (res)
}
```

**Exemple de requete d'insertion**
```{r pressure, echo=FALSE}
query <- sprintf(
    "INSERT INTO %s (%s) VALUES ('%s')",
    table,
    paste("moncorpus", collapse = ", "),
    paste(data$text, collapse = "', '"))

query
```
**Testons la fonction**
```{r pressure, echo=FALSE}
save(data)
```

**Charger données d'un table**
```{r pressure, echo=FALSE}
loadData <- function(table) {
  # Connect to the database
  db <- getSingleConnexion()
  # Construct the fetching query
  query <- sprintf("SELECT * FROM %s", table)
  # Submit the fetch query and disconnect
  data <- dbGetQuery(db, query)
  dbDisconnect(db)
  return(data)
}

```

```{r pressure, echo=FALSE}
loadData(table)
```

```{r pressure, echo=FALSE}
query <- sprintf(
    "INSERT INTO %s (%s) VALUES ('%s')",
    table,
    paste("moncorpus", collapse = ", "),
    paste("Présentez le corpus, en trois à six lignes, en montrant sur quoi se fonde son unité", collapse = "', '")
  )
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
